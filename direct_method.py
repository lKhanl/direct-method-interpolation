# -*- coding: utf-8 -*-
"""direct_method.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rcjxNj1dVs6U3BSE7_KdPItyFKZTA--
"""

import numpy as np
import matplotlib.pyplot as plt

"""Inputs"""

x = np.array([20,21,23,24,25,27,29,30],float)
y = np.array([346,362,343,339,347,346,339,394],float)

def findCoeffMatrix(x):
  #This method is the same of numpy.vander()
  order = len(x)
  arr = [[0 for x in range(order)] for y in range(order)] 
  for i in range(0,order):
    for j in range(0,order):
      arr[i][j] = x[i] ** j
  return arr

def arrayToMatrix(y):
  #This method converts arrays to 1-X matrixes
  newArr = [[0 for x in range(1)] for y in range(len(y))] 
  for i in range(0,len(y)):
    newArr[i][0] = y[i]
  return newArr

def getCoeff(v,y):

  coffMatrix = v

  reverse = np.linalg.inv(coffMatrix)

  constMatrix = arrayToMatrix(y)

  coeff = np.dot(reverse,constMatrix)

  return coeff

def direct(coeff,predict):
  # matrix => array convertion
  vals = [0 for x in range(len(coeff))] 
  for i in range(0,len(vals)):
    vals[i] = coeff[i][0]
    # print("a" + str(i) + ": " + str(vals[i]))

  # calculate the result
  result = 0
  for i in range(0,len(vals)):
    result += vals[i] * predict ** i

  return result

v = findCoeffMatrix(x)
v

coeff = getCoeff(v,y)
for i in range(len(coeff)):
  print("a" + str(i) + ": " + str(coeff[i][0]))

result = direct(coef,26)
print("Result is " + str(result))

"""Ploting"""

xplt = np.linspace(x[0],x[-1])
yplt = np.array([],float)

for i in xplt:
    yplt = np.append(yplt, direct(coeff,i))

plt.plot(x, y, "ro", xplt, yplt, "b-")
plt.show()